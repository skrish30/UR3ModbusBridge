<?xml version="1.0" encoding="UTF-8"?>
<!-- Example script for gazebo_tf_injector. Allows to control the joint states
of a simple robot via a GUI. The robot configuration is displayed in Rviz and in
Gazebo at the same time. -->
<launch>

    <!-- Specify the robot model file. -->
    <arg name="urdf" default="$(find ur_description)/urdf/model.urdf.xacro"/>
    <!-- <arg name="urdf" default="$(find ur_description)/urdf/model.urdf"/> -->


    <!-- Upload the robot description to the ROS parameter server. -->
    <!-- <param name="robot_description" textfile="$(arg urdf)"/> -->
    <param name="robot_description" command="$(find xacro)/xacro '$(find ur_description)/urdf/model.urdf.xacro'" />

    <!-- Start the GUI that lets the user control the states of the individual
    joints of the robot. -->
    <node name="joint_state_publisher" pkg="joint_state_publisher_gui" type="joint_state_publisher_gui">
    </node>

    <!-- Use the robot description and the joint states to compute the poses of
    the robot links. -->
    <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher"/>

    <!-- Display the robot configuration in Rviz. -->
    <node name="rviz" pkg="rviz" type="rviz" args="-d $(find gazebo_tf_injector)/config/example.rviz" required="true"/>
    
    <!-- Start the Gazebo simulator. -->
    <!-- <node name="gazebo" pkg="gazebo_ros" type="gazebo" args="worlds/empty.world" required="true"/> -->
    
    <!-- Upload the robot model to Gazebo and run the plugin that injects the
    ROS TF poses into the Gazebo model. -->

    <node name="upload_model" pkg="gazebo_tf_injector" type="upload_model" args="$(arg urdf)"/>

<!--     <param name="robot_actor" textfile="$(find ur_description)/urdf/model_actor.sdf"/>

    <node name="nextage_spawn" pkg ="gazebo_ros" type="spawn_model"
    output="screen" args="-sdf -param robot_actor -model ur3"/> -->


</launch>

